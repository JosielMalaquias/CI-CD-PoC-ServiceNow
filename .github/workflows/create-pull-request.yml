# Nome do workflow que aparecerá na aba "Actions" do GitHub
name: Create Pull Request on Feature Branch Push

# Gatilho
on:
  push:
    branches:
      - 'feature/**'
      - 'fix/**'
      - 'teste_quality'

# Permissões do job
permissions:
  contents: read
  pull-requests: write

jobs:
  create_pull_request:
    runs-on: ubuntu-latest
    steps:
      # Etapa 1: Faz o checkout do código do seu repositório
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Crucial para ter o histórico completo

      # Etapa 2: Extrai o nome da branch que acionou o workflow
      - name: Get Branch Name
        id: get_branch
        run: |
          BRANCH_NAME=${GITHUB_REF##*/}
          echo "Triggering branch detected: $BRANCH_NAME"
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_OUTPUT

      # ===================================================================
      # === NOVA ETAPA DE DEPURAÇÃO INTENSIVA DO GIT ===
      # ===================================================================
      - name: Debug Git State
        id: debug_git
        run: |
          echo "--- Current Git Status ---"
          git status
          echo "--- All Branches (local and remote) ---"
          git branch -a
          echo "--- Git Log (last 5 commits on this branch) ---"
          git log -n 5 --oneline
          echo "--- Git Log for main (last 5 commits) ---"
          git log main -n 5 --oneline
          echo "--- Checking difference between HEAD and main ---"
          # Este comando lista os commits que estão em HEAD mas não em main
          git log main..HEAD --oneline
          echo "--- Counting commits between HEAD and main ---"
          COMMIT_COUNT=$(git rev-list --count HEAD ^main)
          echo "Raw commit count is: $COMMIT_COUNT"
          echo "commit_count=$COMMIT_COUNT" >> $GITHUB_OUTPUT
          echo "--- End of Git Debug ---"

      # Etapa 4: VERIFICA SE JÁ EXISTE UMA PR
      - name: Check for Existing Pull Request
        id: check_pr
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Checking for existing PR for branch: ${{ steps.get_branch.outputs.BRANCH_NAME }}"
          if gh pr list --head "${{ steps.get_branch.outputs.BRANCH_NAME }}" | grep -q "."; then
            echo "PR_EXISTS=true" >> $GITHUB_OUTPUT
            echo "Pull Request for this branch already exists. Skipping."
          else
            echo "PR_EXISTS=false" >> $GITHUB_OUTPUT
            echo "No existing Pull Request found. Proceeding."
          fi

      # Etapa 5: CRIA A PULL REQUEST (com lógica aprimorada)
      - name: Create Pull Request
        if: steps.debug_git.outputs.commit_count > 0 && steps.check_pr.outputs.PR_EXISTS == 'false'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Attempting to create Pull Request..."
          gh pr create \
            --base main \
            --head "${{ steps.get_branch.outputs.BRANCH_NAME }}" \
            --title "WIP: ${{ steps.get_branch.outputs.BRANCH_NAME }}" \
            --body "Auto-generated PR from ServiceNow commit. Please review the changes for the feature: **${{ steps.get_branch.outputs.BRANCH_NAME }}**"

      # Etapa 6: Informa o motivo da falha ou do pulo
      - name: Report Status
        # Roda sempre, a menos que o job seja cancelado
        if: always()
        run: |
          echo "--- Final Status Report ---"
          echo "Commit count was: ${{ steps.debug_git.outputs.commit_count }}"
          echo "Existing PR status was: ${{ steps.check_pr.outputs.PR_EXISTS }}"
          
          if [ "${{ steps.debug_git.outputs.commit_count }}" -le 0 ]; then
            echo "Reason for not creating PR: No new commits were found between the branch and 'main'."
          fi
          
          if [ "${{ steps.check_pr.outputs.PR_EXISTS }}" == "true" ]; then
            echo "Reason for not creating PR: A Pull Request already exists for this branch."
          fi
          
          if [ "${{ job.status }}" == "success" ]; then
            echo "Workflow finished successfully."
          elif [ "${{ job.status }}" == "failure" ]; then
            echo "::error:: Workflow failed. Check previous steps for details. The 'Create Pull Request' step likely failed due to a validation error from the API."
          fi
